// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("bs-platform/lib/js/curry.js");
var Utils = require("./Utils.js");
var Command = require("./Command.js");
var Discord = require("./Discord.js");
var DiscordJs = require("discord.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

var client = new DiscordJs.Client();

function role_of_user(user) {
  if (user.bot) {
    return /* Bot */2;
  } else {
    var match = user.username;
    if (match === "ckknight") {
      return /* Admin */0;
    } else {
      return /* Normie */1;
    }
  }
}

function parseMessage(msg) {
  var match = role_of_user(msg.author);
  if (match >= 2) {
    return /* None */0;
  } else {
    return Command.parseMessage(client, msg);
  }
}

function logMessage(msg) {
  var author = msg.author;
  var channel = msg.channel;
  var match = Discord.Channel[/* classify */1](channel);
  var channelName;
  switch (match.tag | 0) {
    case 0 : 
        channelName = "DM";
        break;
    case 1 : 
        channelName = "Group DM";
        break;
    case 2 : 
        var textChannel = match[0];
        channelName = textChannel.guild.name + (" #" + textChannel.name);
        break;
    case 3 : 
        channelName = "Voice";
        break;
    
  }
  var fullUsername = "@" + (author.username + ("#" + author.discriminator));
  var content = msg.content;
  console.log(channelName + (": " + (fullUsername + ("> " + content))));
  return /* () */0;
}

function handleMessage(msg) {
  logMessage(msg);
  var __x = parseMessage(msg);
  return Belt_Option.mapWithDefault(__x, /* () */0, (function (param) {
                return Command.handleMessage(msg, param);
              }));
}

client.on("error", (function (exn) {
        var match = Utils.exnCode(exn);
        if (match) {
          if (match[0] === "ECONNRESET") {
            console.log("Connection reset");
            return /* () */0;
          } else {
            console.log(exn);
            return /* () */0;
          }
        } else {
          console.log(exn);
          return /* () */0;
        }
      }));

client.on("ready", (function () {
        var eta = Belt_Option.getExn(Js_primitive.null_undefined_to_opt(client.user));
        var func = Discord.ClientUser[/* setPresence */1];
        Utils.promiseEnd(Utils.promiseMap((function (stuff) {
                      console.log(stuff);
                      return /* () */0;
                    }))(Curry._2((function (param, param$1) {
                          return Curry._3(func, param, param$1, /* Some */["~help"]);
                        })(/* None */0, /* None */0), /* None */0, eta)));
        console.log("Bot is ready!");
        return /* () */0;
      }));

client.on("message", handleMessage);

var token = Fs.readFileSync("./token.txt", "utf8").trim();

client.login(token);

exports.client = client;
exports.role_of_user = role_of_user;
exports.parseMessage = parseMessage;
exports.logMessage = logMessage;
exports.handleMessage = handleMessage;
exports.token = token;
/* client Not a pure module */
