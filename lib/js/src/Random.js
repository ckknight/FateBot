// Generated by BUCKLESCRIPT VERSION 3.1.1, PLEASE EDIT WITH CARE
'use strict';

var RandomJs = require("random-js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Js_undefined = require("bs-platform/lib/js/js_undefined.js");

var MersenneTwister = /* module */[];

function $$int(min, max) {
  var makeFloat = RandomJs.integer(min, max);
  return (function (t) {
      return makeFloat(t) | 0;
    });
}

function integer(min, max) {
  var makeFloat = RandomJs.integer(min, max);
  return (function (t) {
      return makeFloat(t);
    });
}

function real($staropt$star, min, max) {
  var inclusive = $staropt$star ? $staropt$star[0] : false;
  var makeFloat = RandomJs.real(min, max, inclusive);
  return (function (t) {
      return makeFloat(t);
    });
}

var makeBool = RandomJs.bool();

function bool(t) {
  return makeBool(t);
}

function boolByProbability(probability) {
  var makeBool = RandomJs.bool(probability);
  return (function (t) {
      return makeBool(t);
    });
}

function boolByFraction(numerator, denominator) {
  var makeBool = RandomJs.bool(numerator, denominator);
  return (function (t) {
      return makeBool(t);
    });
}

function pick($staropt$star, $staropt$star$1, array, engine) {
  var start = $staropt$star ? $staropt$star[0] : /* None */0;
  var finish = $staropt$star$1 ? $staropt$star$1[0] : /* None */0;
  return Js_primitive.undefined_to_opt(RandomJs.pick(engine, array, Js_undefined.fromOption(start), Js_undefined.fromOption(finish)));
}

function pickExn($staropt$star, $staropt$star$1, array, engine) {
  var start = $staropt$star ? $staropt$star[0] : /* None */0;
  var finish = $staropt$star$1 ? $staropt$star$1[0] : /* None */0;
  var match = pick(/* Some */[start], /* Some */[finish], array, engine);
  if (match) {
    return match[0];
  } else {
    return Pervasives.failwith("pickExn");
  }
}

function picker(start, finish, array) {
  var makePick = RandomJs.picker(array, Js_undefined.fromOption(start), Js_undefined.fromOption(finish));
  return (function (t) {
      return Js_primitive.undefined_to_opt(makePick(t));
    });
}

function shuffleInPlace($staropt$star, array, t) {
  var downTo = $staropt$star ? $staropt$star[0] : 0;
  return RandomJs.shuffle(t, array, downTo);
}

function shuffle($staropt$star, array, t) {
  var downTo = $staropt$star ? $staropt$star[0] : 0;
  return RandomJs.shuffle(t, array.slice(0), downTo);
}

function sample(population, sampleSize, t) {
  return RandomJs.sample(t, population, sampleSize);
}

function die(sideCount) {
  var makeInt = RandomJs.die(sideCount);
  return (function (t) {
      return makeInt(t);
    });
}

function dice(sideCount, dieCount) {
  var makeIntArray = RandomJs.dice(sideCount, dieCount);
  return (function (t) {
      return makeIntArray(t);
    });
}

var makeString = RandomJs.string();

function string(length, t) {
  return makeString(t, length);
}

function stringOfPool(pool) {
  var makeString = RandomJs.string(pool);
  return (function (length, t) {
      return makeString(t, length);
    });
}

function hex(uppercase) {
  var makeString = RandomJs.hex(uppercase);
  return (function (length, t) {
      return makeString(t, length);
    });
}

function date(min, max) {
  var makeDate = RandomJs.date(min, max);
  return (function (t) {
      return makeDate(t);
    });
}

exports.MersenneTwister = MersenneTwister;
exports.$$int = $$int;
exports.integer = integer;
exports.real = real;
exports.bool = bool;
exports.boolByProbability = boolByProbability;
exports.boolByFraction = boolByFraction;
exports.pick = pick;
exports.pickExn = pickExn;
exports.picker = picker;
exports.shuffleInPlace = shuffleInPlace;
exports.shuffle = shuffle;
exports.sample = sample;
exports.die = die;
exports.dice = dice;
exports.string = string;
exports.stringOfPool = stringOfPool;
exports.hex = hex;
exports.date = date;
/* makeBool Not a pure module */
