// Generated by BUCKLESCRIPT VERSION 3.1.1, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function $$parseInt(defaultValue, str) {
  var value = Number(str);
  if (isNaN(value)) {
    return defaultValue;
  } else {
    return value | 0;
  }
}

function promiseMap(f) {
  return (function (param) {
      return param.then((function (x) {
                    return Promise.resolve(Curry._1(f, x));
                  }));
    });
}

function promiseEnd(promise) {
  promise.catch((function (error) {
          console.log(error);
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

function exnCode(exn) {
  return Js_primitive.undefined_to_opt(exn.code);
}

function parseJson(data) {
  try {
    return /* Some */[JSON.parse(data)];
  }
  catch (exn){
    return /* None */0;
  }
}

function memoize(fn) {
  var cache = [/* None */0];
  return (function (arg) {
      var match = cache[/* contents */0];
      if (match) {
        return match[0];
      } else {
        var result = Curry._1(fn, arg);
        cache[0] = /* Some */[result];
        return result;
      }
    });
}

function magicAsArray(item) {
  if (Array.isArray(item)) {
    return item;
  } else {
    return /* array */[item];
  }
}

exports.$$parseInt = $$parseInt;
exports.promiseMap = promiseMap;
exports.promiseEnd = promiseEnd;
exports.exnCode = exnCode;
exports.parseJson = parseJson;
exports.memoize = memoize;
exports.magicAsArray = magicAsArray;
/* No side effect */
