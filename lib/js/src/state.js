// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("bs-platform/lib/js/curry.js");
var Utils = require("./utils.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function getAll() {
  var content;
  try {
    content = Fs.readFileSync("./state.json", "utf8");
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Js_exn.$$Error) {
      var match = Utils.exnCode(exn[1]);
      if (match) {
        if (match[0] === "ENOENT") {
          content = "";
        } else {
          throw exn;
        }
      } else {
        throw exn;
      }
    } else {
      throw exn;
    }
  }
  var tmp;
  try {
    tmp = JSON.parse(content);
  }
  catch (exn$1){
    tmp = JSON.parse("{}");
  }
  var json = Js_json.classify(tmp);
  var __x;
  __x = typeof json === "number" || json.tag !== 2 ? /* None */0 : /* Some */[json[0]];
  return Belt_Option.getWithDefault(__x, { });
}

var getAll$1 = Utils.memoize(getAll);

function getForSnowflake(snowflake) {
  return Js_primitive.undefined_to_opt(getAll$1(/* () */0)[snowflake]);
}

var unsafeDeleteKey = (function(a,b){return(delete a[b],0)});

function setForSnowflake(snowflake, value) {
  var state = getAll$1(/* () */0);
  var stringifiedValue = JSON.stringify(value);
  if (stringifiedValue !== undefined) {
    state[snowflake] = JSON.parse(stringifiedValue);
  } else {
    Curry._2(unsafeDeleteKey, state, snowflake);
  }
  Fs.writeFileSync("./state.json", JSON.stringify(state), "utf8");
  return /* () */0;
}

function StateAccessor(T) {
  var get = function (t) {
    return Curry._1(T[/* decode */1], getForSnowflake(Curry._1(T[/* getSnowflake */2], t)));
  };
  var set = function (t, state) {
    return setForSnowflake(Curry._1(T[/* getSnowflake */2], t), Curry._1(T[/* encode */0], state));
  };
  var update = function (t, updater) {
    return set(t, Curry._1(updater, get(t)));
  };
  return /* module */[
          /* get */get,
          /* set */set,
          /* update */update
        ];
}

function encode(userState) {
  return Js_dict.fromArray(/* array */[
              /* tuple */[
                "note",
                userState[/* note */0]
              ],
              /* tuple */[
                "rolls",
                userState[/* rolls */1]
              ]
            ]);
}

function get(t) {
  var userState = getForSnowflake(t.id);
  var __x = Belt_Option.flatMap(userState, Js_json.decodeObject);
  var dict = Belt_Option.getWithDefault(__x, { });
  var __x$1 = dict["note"];
  var __x$2 = Belt_Option.flatMap(__x$1 === undefined ? /* None */0 : [__x$1], Js_json.decodeString);
  var __x$3 = dict["rolls"];
  var __x$4 = Belt_Option.flatMap(__x$3 === undefined ? /* None */0 : [__x$3], Js_json.decodeNumber);
  return /* record */[
          /* note */Belt_Option.getWithDefault(__x$2, ""),
          /* rolls */Belt_Option.getWithDefault(__x$4, 0.0) | 0
        ];
}

function set(t, state) {
  return setForSnowflake(t.id, encode(state));
}

function update(t, updater) {
  return set(t, Curry._1(updater, get(t)));
}

var UserState = /* module */[
  /* get */get,
  /* set */set,
  /* update */update
];

exports.getAll = getAll$1;
exports.getForSnowflake = getForSnowflake;
exports.unsafeDeleteKey = unsafeDeleteKey;
exports.setForSnowflake = setForSnowflake;
exports.StateAccessor = StateAccessor;
exports.UserState = UserState;
/* getAll Not a pure module */
